WINDBG for malware analysis cheatsheet


bp $exentry # break point on entrypoint
bp VirtualAlloc # break point on a function
!address 0x00000 # give information about address
!address # show memory map as in x64dbg
lm -m note* # it will give modules start with note as notepad...
x kernel32!virtual* # give us any fucntion start with virtual
!findstack kernel32 # look for string for each stack in each thread

open memory view and insert notepad, it will show the header starting with MZ , now go to windbg command and insert the address of PE header,
type: dt -r ntdll!_IMAGE_NT_HEADERS 0000fff <--- address of the image_nt_headers to dereference the struct

- editing memory:
eb $peb+0x2 0x0  # this will edit byte in PEB+02 offset which is pointing to isdebugged and set it to 0

.restart # restart the process

- dump specific memory which contain data using this trick:
first do
!address START_ADDRESS # this will give start and end address
then
.writemem C:\dump.bin START_ADDRESS END_ADDRESS
even if its prints error it will still dump the file

s -a range_start range_end http # search for ascii in a range for string 'http'

https://web.archive.org/web/20210620225133/https://oalabs.openanalysis.net/2019/02/18/windbg-for-malware-analysis/

https://www.keysight.com/blogs/en/tech/nwvs/2020/07/27/debugging-malware-with-windbg

https://blog.talosintelligence.com/windbg-malware-analysis-with-javascript/

